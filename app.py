# app.py
import streamlit as st
from rag_agent import RAGAgent  # On importe votre classe d'agent

# Configuration de la page Streamlit
st.set_page_config(page_title="Assistant √âconomique", layout="wide")

# Titre et description
st.title("ü§ñ Assistant d'Analyse √âconomique et Financi√®re")
st.markdown("Posez une question sur l'√©conomie mondiale, la politique mon√©taire ou le commerce international. L'assistant utilise une base de connaissance de rapports r√©cents (OCDE, FMI, BCE, etc.) et la recherche web pour r√©pondre.")

# Initialisation de l'agent (mis en cache pour la performance)
@st.cache_resource
def load_rag_agent():
    """Charge l'agent RAG une seule fois pour toute la session."""
    try:
        agent = RAGAgent()
        return agent
    except Exception as e:
        st.error(f"Une erreur critique est survenue lors du chargement de l'agent : {e}")
        return None

agent = load_rag_agent()

if agent:
    # Initialisation de l'historique de chat
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Affichage des messages de l'historique
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # Champ de saisie pour la nouvelle question
    if prompt := st.chat_input("Posez votre question ici..."):
        # Ajout et affichage du message de l'utilisateur
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # G√©n√©ration et affichage de la r√©ponse de l'assistant
        with st.chat_message("assistant"):
            with st.spinner("Recherche et analyse en cours..."):
                try:
                    # Appel de la logique de l'agent
                    result = agent.query(prompt)
                    
                    # Formatage de la r√©ponse finale
                    answer = result.get("answer", "D√©sol√©, une erreur est survenue lors de la g√©n√©ration de la r√©ponse.")
                    full_response = answer
                    source_docs = result.get('source_documents')
                    if source_docs:
                        full_response += "\n\n---\n**üìö Sources utilis√©es :**\n"
                        for i, doc in enumerate(source_docs):
                            source_name = doc.metadata.get('source', 'Source inconnue')
                            page = doc.metadata.get('page')
                            display_name = f"* `[{i+1}]` {source_name}"
                            if page is not None:
                                display_name += f" (Page: {int(page)})"
                            full_response += display_name + "\n"
                    
                    st.markdown(full_response)
                    st.session_state.messages.append({"role": "assistant", "content": full_response})

                except Exception as e:
                    st.error(f"Erreur lors de la requ√™te : {e}")
else:
    st.warning("L'agent n'a pas pu √™tre initialis√©. L'application ne peut pas d√©marrer.")